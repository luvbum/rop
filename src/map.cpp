#include "map.h"
#include <iostream>
#include "sdl_wrapper.h"
Map::Map(){
  genMap();
}

Map::~Map(){

}

void Map::Render(){
  int x = 0;
  int y = 0;
  for(unsigned int i = 0; i < mapVector.size(); ++i){
    if(x == 79){
      x = 0;
      ++y;
    }
    else{
      engine.renderChar(tileVector[mapVector.at(i)].nCharacter, x*globals::FONT_W, y*globals::FONT_H,tileVector[mapVector.at(i)].color);
      x++;
    }
  }
	   
}

void Map::genMap(){
  mapStr =
    "################################################################################;"
    "#############.+.################################################################;"
    "#############.#################.################################################;"
    "#############/#################.################################################;"
    "#########......################.################################################;"
    "#########.............#########.################################################;"
    "#########.............#########/################################################;"
    "#########.............+.........################################################;"
    "#########.............##########################################################;"
    "#####################.##########################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;"
    "################################################################################;";
  OBJ_TYPE tileIndex[] = {
    { 0, "Floor", '.', White,  true },  // (0) TILE_ROCKFLOOR
    { 1, "Wall", '#', Black,  false},  // (1) TILE_WALL
    { 2, "Door", '+', White,  false }, // (2) TILE_CLOSEDDOOR
    { 3, "Door", '/', White,  true },  // (3) TILE_OPENDOOR
    { 4, "Tree", 'T', Green, false }  // (4) TILE_TREE
  };
    
  tileVector.push_back(tileIndex[0]);
  tileVector.push_back(tileIndex[1]);
  tileVector.push_back(tileIndex[2]);
  tileVector.push_back(tileIndex[3]);
  tileVector.push_back(tileIndex[4]);
  int x = 0;
  int y = 0;
  for(unsigned int i = 0; i < mapStr.length(); ++i){
    if(mapStr.at(i) == ';'){
      y++;
      x = 0;
    }
    else{
      switch(mapStr.at(i)){
      case '.':
	mapVector.push_back(tileVector.at(0).id);
	break;
      case '#':
	mapVector.push_back(tileVector.at(1).id);
	break;
      case '+':
	mapVector.push_back(tileVector.at(2).id);
	break;
      case '/':
	mapVector.push_back(tileVector.at(3).id);
	break;
      case 'T':
	mapVector.push_back(tileVector.at(4).id);
	break;
      }
      x++;
    }

    
  }
}
